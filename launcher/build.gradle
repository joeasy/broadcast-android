apply plugin: 'com.android.application'
apply plugin: 'jacoco'

android {
    compileSdkVersion 22
    buildToolsVersion "22.0.1"

    defaultConfig {
        applicationId "com.nbplus.vbroadlauncher"
        minSdkVersion 17
        targetSdkVersion 21
        versionCode 1
        versionName "1.0"
    }
    signingConfigs {
        debug {
            storeFile file("../vbroadcast_debug.jks")
//      storePassword "android"
//      keyAlias "androiddebugkey"
//      keyPassword "android"
        }
        release {
            storeFile file("../vbroadcast_release.jks")
            storePassword "nbplus365!"
            keyAlias "Village_Broadcast"
            keyPassword "nbplus365!"
        }
    }
    buildTypes {
        debug {
            signingConfig signingConfigs.debug
            debuggable true
        }
        release {
            signingConfig signingConfigs.release
            minifyEnabled false
            debuggable false // debugging 허용 안함
            zipAlignEnabled true  // apk 최적화
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
        }
    }
}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    compile 'com.android.support:appcompat-v7:22.1.1'
    compile 'com.android.support:support-v4:22.1.1'
    compile 'com.android.support:gridlayout-v7:22.1.1'
    compile 'com.google.android.gms:play-services-location:6.5.+'
    compile 'com.mcxiaoke.volley:library:1.0.+'
    compile 'com.google.code.gson:gson:2.2.4'
    compile 'me.neavo:vitamio:4.2.2'
    compile project(':iot_gateway')
    compile project(':media_player')
    compile project(':push_agent')
    compile project(':common_library')
    compile project(':viewpager_indicator')
    //compile project(':calendar_library')
}

jacoco {
    toolVersion = "0.7.1.201405082137"
}

def coverageSourceDirs = [
        '../launcher/src/main/java'
]

task jacocoTestReport(type: JacocoReport, dependsOn: "testDebug") {
    group = "Reporting"

    description = "Generate Jacoco coverage reports"

    // exclude auto-generated classes and tests
    def fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*', '**/*Test*.*',
                      'android/**/*.*']
    def debugTree = fileTree(dir: "${project.buildDir}/intermediates/classes/debug", excludes: fileFilter)
    def mainSrc = "${project.projectDir}/src/main/java"

    sourceDirectories = files([mainSrc])
    classDirectories = files([debugTree])
    executionData = fileTree(dir: project.projectDir, includes: ['**/*.exec', '**/*.ec'])

    reports {
        xml {
            enabled = true
            destination = "${project.buildDir}/reports/jacoco/test/jacocoTestReport.xml"
        }
        csv.enabled false
        html {
            enabled = true
            destination = "${project.buildDir}/reports/jacoco"
        }
    }
}
